# 1 "tpLex.mll"
 
open Ast
open TpParse
open Lexing
exception Eof of string
exception SyntaxError of string

(* gere les positions numero de ligne + decalage dans la ligne *)
let next_line lexbuf = Lexing.new_line lexbuf

let parse_id id = match id with 
          "if"      -> IF
        | "then"    -> THEN
        | "else"    -> ELSE
        | "return"  -> RETURN
        | "def"     -> DEF
        | "class"   -> CLASS
        | "is"      -> IS
        | "extends" -> EXTENDS
        | "auto"    -> AUTO
        | "static"  -> STATIC
        | "override"-> OVERRIDE
        | "this"    -> THIS
        | "super"   -> SUPER
        | "result"  -> RESULT
        | "new"     -> NEW
        |   _       -> ID id

# 31 "tpLex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\252\255\253\255\254\255\000\000\255\255\001\000\246\255\
    \002\000\004\000\255\255\249\255\250\255\251\255\252\255\253\255\
    \254\255\089\000\228\255\230\255\000\000\001\000\235\255\003\000\
    \238\255\239\255\240\255\241\255\242\255\243\255\244\255\246\255\
    \247\255\248\255\249\255\002\000\017\000\252\255\253\255\194\000\
    \025\001\250\255\236\255\229\255\233\255\231\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\003\000\255\255\255\255\255\255\
    \007\000\008\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\023\000\021\000\255\255\018\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\010\000\004\000\255\255\255\255\001\000\
    \000\000\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\000\000\008\000\000\000\
    \008\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\010\000\255\255\000\000\014\000\000\000\
    \000\000\000\000\004\000\013\000\041\000\000\000\000\000\005\000\
    \000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\045\000\044\000\043\000\
    \042\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\009\000\255\255\000\000\
    \015\000\000\000\038\000\037\000\000\000\000\000\038\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
    \011\000\038\000\000\000\034\000\000\000\000\000\000\000\018\000\
    \000\000\030\000\029\000\031\000\033\000\024\000\032\000\022\000\
    \035\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\023\000\028\000\021\000\019\000\020\000\
    \000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\026\000\000\000\025\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\000\000\000\000\000\000\000\000\
    \002\000\007\000\255\255\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\000\000\000\000\000\000\
    \000\000\039\000\000\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\
    \040\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\006\000\008\000\255\255\009\000\255\255\
    \255\255\255\255\000\000\009\000\035\000\255\255\255\255\004\000\
    \255\255\255\255\255\255\009\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\020\000\021\000\021\000\
    \023\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\006\000\008\000\255\255\
    \009\000\255\255\017\000\017\000\255\255\255\255\017\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\009\000\255\255\255\255\255\255\255\255\255\255\
    \009\000\017\000\255\255\017\000\255\255\255\255\255\255\017\000\
    \255\255\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \255\255\255\255\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\255\255\017\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\255\255\255\255\255\255\255\255\
    \000\000\006\000\008\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\255\255\255\255\255\255\
    \255\255\039\000\255\255\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\017\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\255\255\255\255\255\255\255\255\
    \040\000\255\255\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 0
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 32 "tpLex.mll"
                   ( token lexbuf )
# 213 "tpLex.ml"

  | 1 ->
# 33 "tpLex.mll"
                   ( new_line lexbuf; comment lexbuf )
# 218 "tpLex.ml"

  | 2 ->
# 34 "tpLex.mll"
                   ( raise (Eof ("Comment is not terminated")) )
# 223 "tpLex.ml"

  | 3 ->
# 35 "tpLex.mll"
                   ( comment lexbuf )
# 228 "tpLex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and parse_string buf lexbuf =
   __ocaml_lex_parse_string_rec buf lexbuf 6
and __ocaml_lex_parse_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 38 "tpLex.mll"
              ( CSTES (Buffer.contents buf) )
# 240 "tpLex.ml"

  | 1 ->
# 39 "tpLex.mll"
              ( Buffer.add_char buf '/'; parse_string buf lexbuf )
# 245 "tpLex.ml"

  | 2 ->
# 40 "tpLex.mll"
              ( Buffer.add_char buf '\\'; parse_string buf lexbuf )
# 250 "tpLex.ml"

  | 3 ->
# 41 "tpLex.mll"
              ( Buffer.add_char buf '"'; parse_string buf lexbuf )
# 255 "tpLex.ml"

  | 4 ->
# 42 "tpLex.mll"
              ( Buffer.add_char buf '\''; parse_string buf lexbuf )
# 260 "tpLex.ml"

  | 5 ->
# 43 "tpLex.mll"
              ( Buffer.add_char buf '\n'; parse_string buf lexbuf )
# 265 "tpLex.ml"

  | 6 ->
# 44 "tpLex.mll"
              ( Buffer.add_char buf '\t'; parse_string buf lexbuf )
# 270 "tpLex.ml"

  | 7 ->
# 46 "tpLex.mll"
    ( Buffer.add_string buf (Lexing.lexeme lexbuf);
      parse_string buf lexbuf
    )
# 277 "tpLex.ml"

  | 8 ->
# 49 "tpLex.mll"
      ( raise (SyntaxError ("Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 282 "tpLex.ml"

  | 9 ->
# 50 "tpLex.mll"
        ( raise (Eof ("String is not terminated")) )
# 287 "tpLex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_parse_string_rec buf lexbuf __ocaml_lex_state

and token lexbuf =
   __ocaml_lex_token_rec lexbuf 17
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 53 "tpLex.mll"
                                                 id
# 300 "tpLex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 53 "tpLex.mll"
                                                    ( parse_id id )
# 304 "tpLex.ml"

  | 1 ->
let
# 54 "tpLex.mll"
                                                 idclass
# 310 "tpLex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 54 "tpLex.mll"
                                                         ( IDCLASS idclass )
# 314 "tpLex.ml"

  | 2 ->
# 55 "tpLex.mll"
                      ( token lexbuf )
# 319 "tpLex.ml"

  | 3 ->
# 56 "tpLex.mll"
                      ( next_line lexbuf; token lexbuf)
# 324 "tpLex.ml"

  | 4 ->
let
# 57 "tpLex.mll"
                  lxm
# 330 "tpLex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 57 "tpLex.mll"
                      ( CSTE(int_of_string lxm) )
# 334 "tpLex.ml"

  | 5 ->
# 58 "tpLex.mll"
                      ( comment lexbuf )
# 339 "tpLex.ml"

  | 6 ->
# 59 "tpLex.mll"
                      ( parse_string (Buffer.create 17) lexbuf )
# 344 "tpLex.ml"

  | 7 ->
# 60 "tpLex.mll"
                      ( PLUS )
# 349 "tpLex.ml"

  | 8 ->
# 61 "tpLex.mll"
                      ( MINUS )
# 354 "tpLex.ml"

  | 9 ->
# 62 "tpLex.mll"
                      ( TIMES )
# 359 "tpLex.ml"

  | 10 ->
# 63 "tpLex.mll"
                      ( DIV )
# 364 "tpLex.ml"

  | 11 ->
# 64 "tpLex.mll"
                      ( LPAREN )
# 369 "tpLex.ml"

  | 12 ->
# 65 "tpLex.mll"
                      ( RPAREN )
# 374 "tpLex.ml"

  | 13 ->
# 66 "tpLex.mll"
                      ( SEMICOLON )
# 379 "tpLex.ml"

  | 14 ->
# 67 "tpLex.mll"
                      ( EOF )
# 384 "tpLex.ml"

  | 15 ->
# 68 "tpLex.mll"
                      ( LCURL )
# 389 "tpLex.ml"

  | 16 ->
# 69 "tpLex.mll"
                      ( RCURL )
# 394 "tpLex.ml"

  | 17 ->
# 70 "tpLex.mll"
                      ( COMMA )
# 399 "tpLex.ml"

  | 18 ->
# 71 "tpLex.mll"
                      ( COLON )
# 404 "tpLex.ml"

  | 19 ->
# 72 "tpLex.mll"
                      ( WALRUS )
# 409 "tpLex.ml"

  | 20 ->
# 73 "tpLex.mll"
                      ( DOT )
# 414 "tpLex.ml"

  | 21 ->
# 74 "tpLex.mll"
                   ( RELOP (Ast.Lt) )
# 419 "tpLex.ml"

  | 22 ->
# 75 "tpLex.mll"
                      ( RELOP (Ast.Le) )
# 424 "tpLex.ml"

  | 23 ->
# 76 "tpLex.mll"
                      ( RELOP (Ast.Gt) )
# 429 "tpLex.ml"

  | 24 ->
# 77 "tpLex.mll"
                      ( RELOP (Ast.Ge) )
# 434 "tpLex.ml"

  | 25 ->
# 78 "tpLex.mll"
                      ( RELOP (Ast.Eq) )
# 439 "tpLex.ml"

  | 26 ->
# 79 "tpLex.mll"
                      ( RELOP (Ast.Neq) )
# 444 "tpLex.ml"

  | 27 ->
# 80 "tpLex.mll"
                      ( AMPERSAND )
# 449 "tpLex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

