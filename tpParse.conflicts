
** Conflict (shift/reduce) in state 151.
** Tokens involved: STATIC ID DEF AUTO
** The following explanations concentrate on token STATIC.
** This state is reached from prog after reading:

CLASS IDCLASS LPAREN lparamOpt RPAREN heriteOpt IS LCURL champ

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
list(classe) bloc EOF 
classe list(classe) 
CLASS IDCLASS LPAREN lparamOpt RPAREN heriteOpt IS LCURL construcCorpsOpt RCURL 
                                                         (?)

** In state 151, looking ahead at STATIC, reducing production
** corps -> champ
** is permitted because of the following sub-derivation:

lcorps 
list(corps) 
corps list(corps) // lookahead token appears because list(corps) can begin with STATIC
champ . 

** In state 151, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

construcOblCorpsOpt 
champ construcOblCorpsOpt 
      champ construcOblCorpsOpt 
      option(STATIC) option(AUTO) ID COLON IDCLASS SEMICOLON 
      . STATIC 

** Conflict (shift/reduce) in state 134.
** Tokens involved: STATIC ID DEF AUTO
** The following explanations concentrate on token STATIC.
** This state is reached from prog after reading:

CLASS IDCLASS LPAREN lparamOpt RPAREN heriteOpt IS LCURL methode

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
list(classe) bloc EOF 
classe list(classe) 
CLASS IDCLASS LPAREN lparamOpt RPAREN heriteOpt IS LCURL construcCorpsOpt RCURL 
                                                         (?)

** In state 134, looking ahead at STATIC, reducing production
** corps -> methode
** is permitted because of the following sub-derivation:

lcorps 
list(corps) 
corps list(corps) // lookahead token appears because list(corps) can begin with STATIC
methode . 

** In state 134, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

construcOblCorpsOpt 
methode construcOblCorpsOpt 
        champ construcOblCorpsOpt 
        option(STATIC) option(AUTO) ID COLON IDCLASS SEMICOLON 
        . STATIC 

** Conflict (shift/reduce) in state 106.
** Token involved: RCURL
** This state is reached from prog after reading:

list(classe) LCURL bloc

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
list(classe) bloc EOF 
             (?)

** In state 106, looking ahead at RCURL, shifting is permitted
** because of the following sub-derivation:

LCURL bloc . RCURL 

** In state 106, looking ahead at RCURL, reducing production
** instruction -> bloc
** is permitted because of the following sub-derivation:

LCURL blocInner RCURL // lookahead token appears
      list(instruction) // lookahead token is inherited
      instruction list(instruction) // lookahead token is inherited because list(instruction) can vanish
      bloc . 

** Conflict (shift/reduce) in state 66.
** Tokens involved: TIMES PLUS MINUS DOT DIV
** The following explanations concentrate on token TIMES.
** This state is reached from prog after reading:

list(classe) LCURL expression DIV expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
list(classe) bloc EOF 
             LCURL blocInner RCURL 
                   list(instruction) 
                   instruction list(instruction) 
                   expression SEMICOLON 
                   (?)

** In state 66, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

expression DIV expression 
               expression . TIMES expression 

** In state 66, looking ahead at TIMES, reducing production
** expression -> expression DIV expression
** is permitted because of the following sub-derivation:

expression TIMES expression // lookahead token appears
expression DIV expression . 

** Conflict (shift/reduce) in state 56.
** Tokens involved: TIMES PLUS MINUS DOT DIV
** The following explanations concentrate on token TIMES.
** This state is reached from prog after reading:

list(classe) LCURL expression MINUS expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
list(classe) bloc EOF 
             LCURL blocInner RCURL 
                   list(instruction) 
                   instruction list(instruction) 
                   expression SEMICOLON 
                   (?)

** In state 56, looking ahead at TIMES, reducing production
** expression -> expression MINUS expression
** is permitted because of the following sub-derivation:

expression TIMES expression // lookahead token appears
expression MINUS expression . 

** In state 56, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

expression MINUS expression 
                 expression . TIMES expression 

** Conflict (shift/reduce) in state 54.
** Tokens involved: TIMES PLUS MINUS DOT DIV
** The following explanations concentrate on token TIMES.
** This state is reached from prog after reading:

list(classe) LCURL expression PLUS expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
list(classe) bloc EOF 
             LCURL blocInner RCURL 
                   list(instruction) 
                   instruction list(instruction) 
                   expression SEMICOLON 
                   (?)

** In state 54, looking ahead at TIMES, reducing production
** expression -> expression PLUS expression
** is permitted because of the following sub-derivation:

expression TIMES expression // lookahead token appears
expression PLUS expression . 

** In state 54, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

expression PLUS expression 
                expression . TIMES expression 

** Conflict (shift/reduce) in state 52.
** Tokens involved: TIMES PLUS MINUS DOT DIV
** The following explanations concentrate on token TIMES.
** This state is reached from prog after reading:

list(classe) LCURL expression TIMES expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
list(classe) bloc EOF 
             LCURL blocInner RCURL 
                   list(instruction) 
                   instruction list(instruction) 
                   expression SEMICOLON 
                   (?)

** In state 52, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

expression TIMES expression 
                 expression . TIMES expression 

** In state 52, looking ahead at TIMES, reducing production
** expression -> expression TIMES expression
** is permitted because of the following sub-derivation:

expression TIMES expression // lookahead token appears
expression TIMES expression . 
